document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("new-report-modal");
    const form = document.getElementById("new-report-form");
    const generatedBySelect = document.getElementById("generated-by");
    const reportsTableBody = document.getElementById("reports-table-body");

    // Open Modal
    document.querySelector(".new-report-btn").addEventListener("click", () => {
        modal.style.display = "block";
    });

    // Close Modal
    window.closeModal = () => {
        modal.style.display = "none";
    };

    // Populate Generated By Dropdown
    fetch("http://127.0.0.1:5000/api/users") // Replace with your actual API endpoint
        .then((response) => response.json())
        .then((users) => {
            // Clear existing options
            generatedBySelect.innerHTML = `<option value="" disabled selected>Select user</option>`;

            // Check the users array and log it for debugging
            console.log("Users Array:", users);

            // Loop through each user and create an option
            users.forEach((user) => {
                const option = document.createElement("option");
                option.value = user.user_id; // Corrected to use user.user_id
                option.textContent = user.username; // Display username as text
                generatedBySelect.appendChild(option);
            });
        })
        .catch((error) => console.error("Error fetching users:", error));

		// Function to parse report_data safely
		function formatReportData(data) {
		    try {
		        // Ensure it's a string and pretty-print it if it's a valid object
		        if (typeof data === "object") {
		            return JSON.stringify(data, null, 2); // Pretty print
		        }
		        return data; // If it's already a string, just return it
		    } catch (error) {
		        console.error("Error formatting report_data:", error);
		        return "Invalid JSON";
		    }
		}

		// Handle Form Submission
		form.addEventListener("submit", (event) => {
		    event.preventDefault();

		    const generatedBy = generatedBySelect.value;

		    if (!generatedBy) {
		        alert("Please select a user for 'Generated By'.");
		        return;
		    }

		    try {
		        // Validate and parse the input from the Report Data field
		        const reportDataInput = form.reportData.value.trim();

		        // Parse to ensure valid JSON and prevent bad input
		        const parsedReportData = JSON.parse(reportDataInput);

		        // Prepare the report object
		        const reportData = {
		            report_type: form.reportType.value,
		            user_id: generatedBy,
		            report_data: parsedReportData, // Send as a serialized JSON string
		        };

		        console.log("Report Data (before submission):", reportData); // Debugging info

		        fetch("http://127.0.0.1:5000/api/reports", {
		            method: "POST",
		            headers: { "Content-Type": "application/json" },
		            body: JSON.stringify(reportData),
		        })
		            .then((response) => {
		                if (!response.ok) {
		                    throw new Error(`HTTP error! Status: ${response.status}`);
		                }
		                return response.json();
		            })
		            .then((data) => {
		                alert("Report created successfully!");
		                closeModal();
		                form.reset();
		                fetchReports(); // Refresh the reports table
		            })
		            .catch((error) => {
		                console.error("Error creating report:", error);
		                alert("An error occurred while creating the report.");
		            });
		    } catch (error) {
		        alert("Invalid JSON in the 'Report Data' field. Please enter valid JSON.");
		        console.error("Invalid JSON input:", error);
		    }
		});

		// Fetch Reports and Populate the Table
		function fetchReports() {
		    fetch("http://127.0.0.1:5000/api/reports")
		        .then((response) => response.json())
		        .then((reports) => {
		            reportsTableBody.innerHTML = ""; // Clear existing rows

		            reports.forEach((report) => {
		                const row = document.createElement("tr");

		                // Parse the report_data field
		                const reportData = formatReportData(report.report_data);

		                row.innerHTML = `
		                    <td>${report.report_id}</td>
		                    <td>${report.report_type}</td>
		                    <td>${report.user_id || "Unknown User"}</td>
		                    <td><pre>${reportData}</pre></td>
		                    <td>${new Date(report.generated_at).toLocaleString()}</td>
		                `;
		                reportsTableBody.appendChild(row);
		            });
		        })
		        .catch((error) => console.error("Error fetching reports:", error));
		}


    // Fetch initial reports when the page loads
    fetchReports();
});
