document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("new-report-modal");
    const form = document.getElementById("new-report-form");
    const generatedBySelect = document.getElementById("generated-by");
    const reportsTableBody = document.getElementById("reports-table-body");

    // Open Modal
    document.querySelector(".new-report-btn").addEventListener("click", () => {
        modal.style.display = "block";
    });

    // Close Modal
    window.closeModal = () => {
        modal.style.display = "none";
    };

    // Populate Generated By Dropdown
    fetch("http://127.0.0.1:5000/api/users") // Replace with your actual API endpoint
        .then((response) => response.json())
        .then((users) => {
            // Clear existing options
            generatedBySelect.innerHTML = `<option value="" disabled selected>Select user</option>`;

            // Check the users array and log it for debugging
            console.log("Users Array:", users);

            // Loop through each user and create an option
            users.forEach((user) => {
                const option = document.createElement("option");
                option.value = user.user_id; // Corrected to use user.user_id
                option.textContent = user.username; // Display username as text
                generatedBySelect.appendChild(option);
            });
        })
        .catch((error) => console.error("Error fetching users:", error));

    // Handle Form Submission
    form.addEventListener("submit", (event) => {
        event.preventDefault();

        // Retrieve the selected value of the dropdown
        const generatedBy = generatedBySelect.value;
        console.log("Generated By (Dropdown Value):", generatedBy); // Debugging line

        // Check if the value is empty or undefined
        if (!generatedBy) {
            alert("Please select a user for 'Generated By'.");
            return;
        }

        const reportData = {
            reportType: form.reportType.value,
            generatedBy: generatedBy, // Use user_id here
            rreport_data: JSON.stringify(JSON.parse(form.reportData.value)), // Serialize JSON value
        };

        console.log("Report Data (before submission):", reportData); // Debugging line

        fetch("http://127.0.0.1:5000/api/reports", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(reportData),
        })
            .then((response) => {
                if (response.ok) {
                    alert("Report created successfully!");
                    closeModal();
                    form.reset();
                    fetchReports(); // Refresh the reports table
                } else {
                    throw new Error("Failed to create report");
                }
            })
            .catch((error) => {
                console.error("Error creating report:", error);
                alert("An error occurred while creating the report.");
            });
    });

    // Fetch Reports and Populate the Table
    function fetchReports() {
        fetch("http://127.0.0.1:5000/api/reports") // Replace with your actual API endpoint
            .then((response) => response.json())
            .then((reports) => {
                reportsTableBody.innerHTML = ""; // Clear existing rows

                reports.forEach((report) => {
                    // Make sure generatedBy is not undefined
                    if (report.generatedBy) {
                        fetch(`http://127.0.0.1:5000/api/users/${report.generatedBy}`)
                            .then((userResponse) => userResponse.json())
                            .then((user) => {
                                const row = document.createElement("tr");
                                row.innerHTML = `
                                    <td>${report.id}</td>
                                    <td>${report.reportType}</td>
                                    <td>${user.username || "Unknown User"}</td>
                                    <td>${report.reportData}</td>
                                    <td>
                                        <button class="delete-btn" data-id="${report.id}">Delete</button>
                                    </td>
                                `;
                                reportsTableBody.appendChild(row);
                            })
                            .catch((error) => {
                                console.error("Error fetching user data:", error);
                                const row = document.createElement("tr");
                                row.innerHTML = `
                                    <td>${report.id}</td>
                                    <td>${report.reportType}</td>
                                    <td>Unknown User</td>
                                    <td>${report.reportData}</td>
                                    <td>
                                        <button class="delete-btn" data-id="${report.id}">Delete</button>
                                    </td>
                                `;
                                reportsTableBody.appendChild(row);
                            });
                    } else {
                        // If generatedBy is undefined or null, handle gracefully
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td>${report.id}</td>
                            <td>${report.reportType}</td>
                            <td>Unknown User</td>
                            <td>${report.reportData}</td>
                            <td>
                                <button class="delete-btn" data-id="${report.id}">Delete</button>
                            </td>
                        `;
                        reportsTableBody.appendChild(row);
                    }
                });

                // Add event listeners to delete buttons
                document.querySelectorAll(".delete-btn").forEach((button) => {
                    button.addEventListener("click", () => {
                        const reportId = button.getAttribute("data-id");
                        deleteReport(reportId);
                    });
                });
            })
            .catch((error) => console.error("Error fetching reports:", error));
    }

    // Delete Report
    function deleteReport(reportId) {
        fetch(`http://127.0.0.1:5000/api/reports/${reportId}`, { method: "DELETE" })
            .then((response) => {
                if (response.ok) {
                    alert("Report deleted successfully!");
                    fetchReports(); // Refresh the reports table
                } else {
                    throw new Error("Failed to delete report");
                }
            })
            .catch((error) => {
                console.error("Error deleting report:", error);
                alert("An error occurred while deleting the report.");
            });
    }

    // Fetch initial reports when the page loads
    fetchReports();
});
